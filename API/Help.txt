#############################################################################################
#                                                                                           #
#   This file contains the steps of creating the current                                    #
#   web application                                                                         #
#                                                                                           #
#                                                                                           #
#                                                                                           #
#                                                                                           #
#############################################################################################

STEP BY STEP CREATION OF PROJECT USING VS CODE

API BASICS

1) Creation of controllers - Entities
2) Install EntityFrameworkCore same version as yours .net core and sqlserver. Then add connectionstring and configure in services'
3) Install dotnet tool install --global dotnet-ef --version 3.1.403 + install Microsoft.EntityFrameworkCore.Design + dotnet ef migrations add InitialCreate -o Data/Migrations
4) Create Core project dotnet new classlib -o Core of classlib type and dotnet new classlib -o Infrastucture that will contain the store context
5) Add projects to sln  dotnet sln add Core/
6) Add reference of projects to API. run dotnet add reference ../Infrastructure and dotnet add reference ../Core from API
7) Add reference from Core to Infrastructure and run dotnet restore from root to register the references. Then check and correct namespaces if necessary and injections in csproj files
8) git init, git add ., git commit -m "dfs", git remote add origin https://github.com/spyrosgriniaris/ECommerceApp.git, git push -u origin master

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

API ARCHITECTURE

1) Add repo and interface and add as a service in startup and change product controller ctor args and calls to repo from methods
2) Add productType and brand and add dbsets
3) Create the new db -> dotnet ef database drop -p Infrastructure -s API in root, dotnet ef migrations remove -p Infrastructure -s API
    dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations
4) Create Data/Config and ProductConfiguration. This will be used to configure the entities there and not in StoreContext. Add OnModelCreating in StoreContext
5) Do migrations again dotnet ef migrations remove -p Infrastructure -s API, dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations
6) Change program to create db from there
7) Create SeedData, StoreContextSeed and let program know to seed when app starts

-----------------------------------------------------------------------------------------

API GENERIC REPOSITORY

1) Create generic repo and add in startup
2) Specification method for situations like include
3) Create ISpecification, BaseSpecification, SpecificationEvaluator and change repo calls to generic in controller
4) Create Dtos
5) Install AutoMapper.Extensions.Microsoft.DependencyInjection in API and add it as service in startup
    Then reform controller to retun dtos
6) Create custom automapper value resolver in helpers for picture urls, to add all path in value -> add apiurl in appsettings and complete in mapping profiles
7) Serving static content from api (like images using url in postman)
    7.1) Create wwwroot in API and add images folder
    7.2) Add app.UseStaticFiles() in Startup

-----------------------------------------------------------------------------------------

API ERROR HANDLING

1) Create BaseApiController and make productscontroller to derive from it
2) Create BuggyController to test errors
3) Create consistent error response
    3.1) Create folder Errors in API and ApiResponse.cs and use this class in buggyController
4) Add notfound endpoint error handler
    4.1) Create in API Errors -> ErrorController
    4.2) Add app.UseStatusCodePagesWithReExecute("/errors/{0}"); in startup
5) Exception handler middleware
    5.1) Create Errors -> ApiException.cs
    5.2) Create in API folder Middleware and ExceptionMiddleware.cs
    5.3) Use this middleware in startup and not developmentpage
6) Validation errors (in api/5 i have api/five, wrong type of value in url, form fields errors etc)
    6.1) Create ApiValidationErrorResponse and configure in startup
There are now consistent error responses with statusCode,message,Errors(fields where they occur)
7) Add Swagger in API (Swashbuckle.AspNetCore.SwaggerGen and SwaggerUI latest versions) and configure in Configure and ConfigureServices
    7.1) Add [ApiExplorerSettings(IgnoreApi = true)] in Error and weather controller. In localhost/swagger i can see the documentation
    7.2) Add Attributes tou getproduct in product controller
8) Cleaning the Startup class. Add folder Extensions in API and ApplicationServicesExtensions.cs
    8.1) Add swaggerserviceextensions

//              specification pattern
//              sto base exw ta pedia, sto spec ta gemizw kai sto evaluator ta ftiaxnw pou to kalw apo ti generic

-----------------------------------------------------------------------------------------------

PAGING/SORTING/FILTERING

1) Add sorting specification class
    1.1) Add OrderBy and OrderByDescending in ISpecification and implement interface in BaseSpecification
    1.2) Refine query in specificationevaluator
    1.3) Add param sort in getproducts and specification class
    1.4) Change ProductsWithTypesAndBrandsSpecification class for sort
2) Filtering
    Add brandId and typeId in controller and follow same procedure
3) Add Pagination
    3.1) Add properties in ISpecification and implment in BaseSpecification
    3.2) Refine query produced in SpecificationEvaluator for paging
    3.3) Create class in Core ProductSpecParams to store all params in GetProducts and not sort, brandId etc
    3.4) Add in spec class
    3.5) Create class Pagination in Helpers
    3.6) Add method Count async in IGenericrepo and implement
    3.7) Create ProductsWithFiltersForCountSpecification class
    3.8) Change getproducts to return pagination and not ireadonlylist
    3.9) Change return in getProducts
4) Search functionality
    4.1) Add fields in ProductSpecParams and ProductsWithTypesAndBrandsSpecification and ProductsWithFiltersForCountSpecification
5) Add CORS Support