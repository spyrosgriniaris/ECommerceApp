#############################################################################################
#                                                                                           #
#   This file contains the steps of creating the current                                    #
#   web application                                                                         #
#                                                                                           #
#                                                                                           #
#                                                                                           #
#                                                                                           #
#############################################################################################

STEP BY STEP CREATION OF PROJECT USING VS CODE

API BASICS

1) Creation of controllers - Entities
2) Install EntityFrameworkCore same version as yours .net core and sqlserver. Then add connectionstring and configure in services'
3) Install dotnet tool install --global dotnet-ef --version 3.1.403 + install Microsoft.EntityFrameworkCore.Design + dotnet ef migrations add InitialCreate -o Data/Migrations
4) Create Core project dotnet new classlib -o Core of classlib type and dotnet new classlib -o Infrastucture that will contain the store context
5) Add projects to sln  dotnet sln add Core/
6) Add reference of projects to API. run dotnet add reference ../Infrastructure and dotnet add reference ../Core from API
7) Add reference from Core to Infrastructure and run dotnet restore from root to register the references. Then check and correct namespaces if necessary and injections in csproj files
8) git init, git add ., git commit -m "dfs", git remote add origin https://github.com/spyrosgriniaris/ECommerceApp.git, git push -u origin master

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

API ARCHITECTURE

1) Add repo and interface and add as a service in startup and change product controller ctor args and calls to repo from methods
2) Add productType and brand and add dbsets
3) Create the new db -> dotnet ef database drop -p Infrastructure -s API in root, dotnet ef migrations remove -p Infrastructure -s API
    dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations
4) Create Data/Config and ProductConfiguration. This will be used to configure the entities there and not in StoreContext. Add OnModelCreating in StoreContext
5) Do migrations again dotnet ef migrations remove -p Infrastructure -s API, dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations
6) Change program to create db from there
7) Create SeedData, StoreContextSeed and let program know to seed when app starts

-----------------------------------------------------------------------------------------

API GENERIC REPOSITORY

1) Create generic repo and add in startup
2) Specification method for situations like include
3) Create ISpecification, BaseSpecification, SpecificationEvaluator and change repo calls to generic in controller
4) Create Dtos
5) Install AutoMapper.Extensions.Microsoft.DependencyInjection in API and add it as service in startup
    Then reform controller to retun dtos
6) Create custom automapper value resolver in helpers for picture urls, to add all path in value -> add apiurl in appsettings and complete in mapping profiles
7) Serving static content from api (like images using url in postman)
    7.1) Create wwwroot in API and add images folder
    7.2) Add app.UseStaticFiles() in Startup