#############################################################################################
#                                                                                           #
#   This file contains the steps of creating the current                                    #
#   web application                                                                         #
#                                                                                           #
#                                                                                           #
#                                                                                           #
#                                                                                           #
#############################################################################################

STEP BY STEP CREATION OF PROJECT USING VS CODE

API BASICS

1) Creation of controllers - Entities
2) Install EntityFrameworkCore same version as yours .net core and sqlserver. Then add connectionstring and configure in services'
3) Install dotnet tool install --global dotnet-ef --version 3.1.403 + install Microsoft.EntityFrameworkCore.Design + dotnet ef migrations add InitialCreate -o Data/Migrations
4) Create Core project dotnet new classlib -o Core of classlib type and dotnet new classlib -o Infrastucture that will contain the store context
5) Add projects to sln  dotnet sln add Core/
6) Add reference of projects to API. run dotnet add reference ../Infrastructure and dotnet add reference ../Core from API
7) Add reference from Core to Infrastructure and run dotnet restore from root to register the references. Then check and correct namespaces if necessary and injections in csproj files
8) git init, git add ., git commit -m "dfs", git remote add origin https://github.com/spyrosgriniaris/ECommerceApp.git, git push -u origin master

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

API ARCHITECTURE

1) Add repo and interface and add as a service in startup and change product controller ctor args and calls to repo from methods
2) Add productType and brand and add dbsets
3) Create the new db -> dotnet ef database drop -p Infrastructure -s API in root, dotnet ef migrations remove -p Infrastructure -s API
    dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations
4) Create Data/Config and ProductConfiguration. This will be used to configure the entities there and not in StoreContext. Add OnModelCreating in StoreContext
5) Do migrations again dotnet ef migrations remove -p Infrastructure -s API, dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations
6) Change program to create db from there
7) Create SeedData, StoreContextSeed and let program know to seed when app starts

-----------------------------------------------------------------------------------------

API GENERIC REPOSITORY

1) Create generic repo and add in startup
2) Specification method for situations like include
3) Create ISpecification, BaseSpecification, SpecificationEvaluator and change repo calls to generic in controller
4) Create Dtos
5) Install AutoMapper.Extensions.Microsoft.DependencyInjection in API and add it as service in startup
    Then reform controller to retun dtos
6) Create custom automapper value resolver in helpers for picture urls, to add all path in value -> add apiurl in appsettings and complete in mapping profiles
7) Serving static content from api (like images using url in postman)
    7.1) Create wwwroot in API and add images folder
    7.2) Add app.UseStaticFiles() in Startup

-----------------------------------------------------------------------------------------

API ERROR HANDLING

1) Create BaseApiController and make productscontroller to derive from it
2) Create BuggyController to test errors
3) Create consistent error response
    3.1) Create folder Errors in API and ApiResponse.cs and use this class in buggyController
4) Add notfound endpoint error handler
    4.1) Create in API Errors -> ErrorController
    4.2) Add app.UseStatusCodePagesWithReExecute("/errors/{0}"); in startup
5) Exception handler middleware
    5.1) Create Errors -> ApiException.cs
    5.2) Create in API folder Middleware and ExceptionMiddleware.cs
    5.3) Use this middleware in startup and not developmentpage
6) Validation errors (in api/5 i have api/five, wrong type of value in url, form fields errors etc)
    6.1) Create ApiValidationErrorResponse and configure in startup
There are now consistent error responses with statusCode,message,Errors(fields where they occur)
7) Add Swagger in API (Swashbuckle.AspNetCore.SwaggerGen and SwaggerUI latest versions) and configure in Configure and ConfigureServices
    7.1) Add [ApiExplorerSettings(IgnoreApi = true)] in Error and weather controller. In localhost/swagger i can see the documentation
    7.2) Add Attributes tou getproduct in product controller
8) Cleaning the Startup class. Add folder Extensions in API and ApplicationServicesExtensions.cs
    8.1) Add swaggerserviceextensions

//              specification pattern
//              sto base exw ta pedia, sto spec ta gemizw kai sto evaluator ta ftiaxnw pou to kalw apo ti generic

-----------------------------------------------------------------------------------------------

PAGING/SORTING/FILTERING

1) Add sorting specification class
    1.1) Add OrderBy and OrderByDescending in ISpecification and implement interface in BaseSpecification
    1.2) Refine query in specificationevaluator
    1.3) Add param sort in getproducts and specification class
    1.4) Change ProductsWithTypesAndBrandsSpecification class for sort
2) Filtering
    Add brandId and typeId in controller and follow same procedure
3) Add Pagination
    3.1) Add properties in ISpecification and implment in BaseSpecification
    3.2) Refine query produced in SpecificationEvaluator for paging
    3.3) Create class in Core ProductSpecParams to store all params in GetProducts and not sort, brandId etc
    3.4) Add in spec class
    3.5) Create class Pagination in Helpers
    3.6) Add method Count async in IGenericrepo and implement
    3.7) Create ProductsWithFiltersForCountSpecification class
    3.8) Change getproducts to return pagination and not ireadonlylist
    3.9) Change return in getProducts
4) Search functionality
    4.1) Add fields in ProductSpecParams and ProductsWithTypesAndBrandsSpecification and ProductsWithFiltersForCountSpecification
5) Add CORS Support

-------------------------------------------------------------------------------------------------------

SETTING UP ANGULAR DEVELOPMENT ENVIRONMENT

1) Add project with ng new
2) Setting up Angular to use https
    2.1) Create folder ssl and place the certificates. Then install certs pes instructions
    2.2) angular.json -> serve -> options, add 
            "sslKey": "ssl/server.key",
            "sslCert": "ssl/server.crt",
            "ssl": true
3) Add ngx bootstrap ng add ngx-bootstrap, npm install font-awesome, add "./node_modules/font-awesome/css/font-awesome.min.css" in styles

---------------------------------------------------------------------------------------------------------

UI BASICS

1) Add navbar
2) Retrieve data from api
3) Create products interface (app -> models)

----------------------------------------------------------------------------------------------------------

BUILDING THE UI

1) Organize files and folders (Core, Shared, Feature)
    1.1) ng g m core (create core module). Create also modules shop, share
    1.2) ng g c shop --flat --skip-tests create shop component in shop module (flat doesn't make seperate folder)
    1.3) create shop service ng g s shop --skip-tests --flat
    1.4) Create shop routing ng g m shop-routing --flat
    1.5) Move navBar in Core module and add declaration in core.module.ts. Remove navBar comp from declarations in app.module and add CoreModule in imports
        Finally, add NavBarComponent in exports of core.module.ts. Move models folder in share module
    1.6) Add content in shop service and consume from shop component and place list of products from app to shop component. Import shop module in app module and export shop component from shop module
    1.7) Design shop page. Shop component.html
    1.8) Create product-item component, add models and service calls for filters. Create OrderBy
    1.9) Add pagination functionality. It will go in shared module. Might need to use later. Export it and import ShareModule on shopmodule
    1.10) Making pagination a shared component

-------------------------------------------------------------------------------------------------------------

CLIENT SIDE ROUTING

1) Create home (ng g m home) and home component ng g c home --skip-tests --flat and create produc-details component
2) Creating the routes. Populate routes in app-routing. Set up the nav links. import routermodule in core
3) Get individual product. (method in service)
4) Add lazy loading
    4.1) Add variable routes in shop-routing, import routerModule and not CommonModule and add routerModule to exports
    4.2) import shop-routing in shop.module and not routermodule
    4.3) Delete from app.module imports shopModule and from exports of shop.module the shopComponent

---------------------------------------------------------------------------------------------------------------

CLIENT SIDE ERROR HANDLING

1) create component in core test-error (ng g c test-error --skip-tests) and add it in approuting. Then add it in Contact in navbar
    also add not-found and server-error components in core
2) Http Interceptor to catch errors
    2.1) Create folder interceptors in core and inside error.interceptor.ts and add it in providers of app.module. This is for
        404 and 500 erros status.
3) Toast notifications for 400 error
    3.1) install npm install ngx-toastr and import it in core.module and add "./node_modules/ngx-toastr/toastr.css", in angular.json styles
        and add if statements in interceptor
4) Handling validation errors like api/products/fortytwo
    4.1) modify first if clause
5) Improving the internal error server component
    5.1) Enhance error.interceptor at error 500 and add content in server-error.component.ts and html

-------------------------------------------------------------------------------------------------------------------

STYLING OUR WEBSITE

1) Adding a section header component. import core module in app module, export sectionheader from core and add section header in app component html.
2) Adding breadcrumbs
    2.1) Add package from npmjs npm install --save xng-breadcrumb, add it in core module and add html in section-header. It needs a data property in route. 
        So we add it in app-routing routes
    2.2) Add breadcrumb in shop routing and set alias in product details and add styles in styles.scss
3) Setting the section header title from breadcrumb service. Add in section-header.ts and html
4) style product items
5) change theme with bootswatch  ( Check themestr.app )
    5.1) npm install bootswatch, add it in styles in angular.json
6) Adding loading indicators
    6.1) npm install ngx-spinner and import in app.module.ts and add it in app.component.html
    6.2) Create folder in core Services that not neccessarily belong to a feature ng g s busy --flat --skip-tests and add content in service
    6.3) Create loading.interceptor.ts and add content
    6.4) Add interceptor in providers of app.module.ts
7) Cleanig up loading issues
    7.1) Add content in productDetails component
8) Adding the home page content
    8.1) Import and export carousel module and import shareModule in homeModule

---------------------------------------------------------------------------------------------------------------------------------

API - Basket

Goal: Store the customer basket in the server memory and create supporting repository and controller. In memory(server) Redis will be used.
    It is also used for cached. Supports strings, hashes, lists, sets, etc

1) Setting up Redis. Install nuget StackExhange.Redis in Infrastructure. Add in Startup for redis. Add conection string in appsettings.dev.json
    We'll install a redis server locally. Then in our prod server.
2) Setting the Basket class. Add entity in core
3) Create basket repository  in Core. We don't use the generic repo bc basket will not use ef, but will query directly redis db.
    Create BasketRepository in Infrastructure. Add it as a service in ApplicationServicesExtensions.cs
4) Implement the BasketRepository
5) Adding the basket controller
6) Install Redis on Windows
    6.1) redis.io. Install chocolatey and follow instructions for powershell. Restart powershell as admin again and run choco install redis-64

------------------------------------------------------------------------------------------------------------------------------------

CLIENT -BASKET

1) Create the basket module.
    1.1) inside app -> ng g m basket
    1.2) inside basket module -> ng g m basket-routing --flat
    1.3) ng g c basket --flat --skip-tests, ng g s basket --flat --skip-tests
    1.4) Set routes in app-routing and basket routing and add routermodule in basket module. Add routerLink in navbar to basket
2) Create the basket types
    2.1)npm install uuid and add basket in models
3) Basket service methods
4) Add the add item to basket in te component method
5) Persist the basket in startup (get the basket and not only the basket id) in app.component.ts
6) Display the basket item count in the navbar -> nav-bar.ts & html. Add the basket$ observable in basket component.ts and html
7) Styling the basket page
8) Add the basket totals to the service
    8.1) Add IBasketTotal interface, add method in service and also call it from getBasket and setBasket
9) Create the order summary component (Create new component in shared)
    9.1) ng g c order-totals --skip-tests. Add html. Export it from shareModule and import ShareModule from BasketModule.
        Add component in basket component
    9.2) Increment and decrement in service. Add methods to basket components
    9.3) Hooking up the product detail component to the basket (Increment, Decrement and add to cart)
10) Adding the checkout module ng g m checkout, ng g m checkout-routing --flat, ng g s checkout --flat --skip-tests, ng g c checkout --flat --skip-tests
    10.1) Add routing and then route to app-routing

---------------------------------------------------------------------------------------------------------------------------------------------------


IDENTITY - API

1) Setting up the identity packages (Microsoft.AspNetCore.Identity.EntityFrameworkCore tin latest  in Core), (Microsoft.AspNetCore.Identity latest sto infra),
    Microsoft.IdentityModel.Tokens sto infra, System.IdentityModel.Tokens.Jwt sto infra, Microsoft.AspNetCore.Authentication.JwtBearer sto API
2) Setting up the identity classes (in Core), folder Identity, classes in there. Then Add the Identity DbContext in the Infrastructure project(folder Identity).
    Add it as additional service in startup class and add connection string
3) Adding migration. from sln run (dotnet ef migrations add IdentityInitial -p Infrastructure -s API -c AppIdentityDbContext -o Identity/Migrations)
4) Seeding Identity data (AppIdentityDbContextSeed.cs) in Infrastructure
    Add the startup services for identity (with extension method, to keep startup as clean as possible) -> IdentityServiceExtensions in Api->Extensions
    Add extension class and the reference in startup.cs
5) Adding entity to program class, in program.cs add service. then run project from api
6) Add AccountController
7) Registering a user (create register method)
8) Adding a token generation service. Create Token Service and its interface
9) Setting up identity to use the token
    Configure auth in IdentityServiceExtensions. Add in appsetting.json the token key. prosthetw sto configure tis startup to add.authentication
10) Testing the token. Add service in ApplicationServicesExtensions. Use service for token in AccountController.
    Create testauth method in BuggyController to test auth
11) Add additional account methods
12) Adding user manager extension methods. Point is to include Address in userManager. Create class UserManagerExtensions.cs an change in acount controller 
    to call extension methods. We need to add another dto for user, because json does not know which address to return, because address class has AppUser, which also
    has address inside. Create AddressDto and create new map.
    When returning address, we return dto. Add method in accountController to update the address

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

API Validation (validate incomming data with annotation etc)

1) Model Validation. AddressDto annotations added.
2) Checking for duplicate email addresses. RegisterDto annotations. Add code line to check for duplicate email in accountController register
3) Validating the basket. Add Dtos for basket entities and change parameters related in basketController
4) config swagger. Add code in swaggerserviceextensions


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CLIENT - IDENTITY

1) Creating the account module - new feature -> new module -  (It is gonna be lazy loaded to login and register) -> ng g m account. Then create another module for routing
    ng g m account-routing --flat, create service ng g s account --flat --skip-tests, then components for login and register ng g c login --skip-tests and for register
    Add paths and imports/exports at account-routing and account modules and add account in app-routing module, add routerlinks in navbar, 
    add interface models for user and address
2) Create the account service methods
3) Use reactive forms in Angular
    Import and export in share module reactive forms module, import share module in account module. Add code for login in ts and html
4) Submitting data to server
5) Updating the navbar for the loggedIn user -> add code in navbar ts and html. we use ng-container because we don't want the styling of the parent div
6) Persist the login for refresh etc. Add methods in account service and in app.component.ts
7) Adding a dropdown to the navbar. Add bsdropdown in share module imports and exports, import share module in core and add in navbar component
8) Form Validation in Angular. Add validtors in login.ts
9) Displaying validation errors. With spans for every error the html gets huge. better way is a reusable component
10) Creating a reusable text input
    Add new component in share/components ng g c text-input --skip-tests, add it in exports of share.module
    Add code in text-input.ts
11) Reusable text input template and ProductConfiguration
    Add html code in text-input and css. Replace inputs in login.html
12) Create register form
    Add code in register.ts and html
13) Async validation for email address in case is in use
    Add async validator in register.ts
    add new div in text input
    Add if statement in loading intercepto not to show indicator in async validation
    For small indicator in email field, add div for pending status in text-input, add class in text input css
14) Creating an auth guard
    create folder guards in core -> ng g g auth --skip-tests -> CanActivate
    Add code in auth guard
    Add CanActivate and authguard in app-routing.module in checkout path
    Add in login.ts var returnUrl to take the query param of state from authguard and onSubmit to navigate back to where query params says
    After login with auth guard if i refresh i am taken back to the form (because behavior subject is null). to solve this:
15) Using the replay subject
    Use replay subject and not behavior in account service in order the subject to hold and cache 1 value
    With this approach the subject waits to until it has a value
    Refine app.component.ts and accountService to return observable of null if there is no user, otherwise authguard will do nothing and the user will not be able
    to press Proceed to checkout
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

API - ORDERS 

1) Creating the order aggregate (Classes that support an order that we will create in our db). Create Core->Entities->OrderAggregate
    Add entity Address (will be associated with each order), DeliveryMethod, ProductItemOrdered, OrderStatus enum, OrderItem, Order
2) Configuring the order entities (OrderConfiguration in infra->Config), OrderItemConfiguration, DeliveryMethodConfiguration
3) StoreContextUpdate and seeding delivery methods. Create DbSets in StoreContext. Add StoreContextSeed for deliverymethods
4) Creating the order migration. in solution -> dotnet ef migrations add OrderEntityAdded -p Infrastructure -s API -c StoreContext, run the api and check if
    edlivery methods are seeded
5) Creating an order service. Create IOrderInterface in Core -> Interfaces -> Orders. Implement service in Infra->services->orders->orderservice.cs
    and add it in ApplicationServicesExtensions
6) Implementing the create order method
7) Creating the order controller, create addressdto and add mapping. Create claimprincipalextensions to retrieve user's email withon repeating code

Generic repo creates a DbContext instance for every repo. we will use unit of work pattern. with this way we will have the repos but only One DbContext that will be injected

8) Implement unit of work. Create iunitofwork interface, create UnitOfWork.cs in infra->data and add code and add it as service in ApplicationServicesExtensions
    Add methods to IGeneric repository for unit of work and implement in GeneriRepository
9) Refactoring the orderservice to use the unit of work. Remove references to different repos except for basket that is unique and useds redis which is a deifferent db
10) Implementing the order get methods in order service. Create specification OrdersWithItemsAndOrderingSpecification, add constructors for 
    all and individual orders and implement methods on orderservice
11) Implementing order controller get methods for orders and deliverymethods
12) Shapping the order data. Create OrderToReturnDto and OrderItemDto and create mapping profiles. Adjust orderController to return the dtos
13)     Configure automapper to take the right values
14) Another automapper value resolver in helpers -> OrderItemUrlResolver and use it in mapping profile
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CLIENT - checkout
1) Import ShareModule in checkoutmodule and add code to checkout.html
2) Creating a stepper component. run ng add @angular/cdk. we will create a stepper as a shared component, import and export CdkStepperModule in ShareModule
3) Create a new component in share/components ng g c stepper --skip-tests and export it in share module and add it in checkout.html
4) Setting up the stepper component. Set up stepperComponent.ts and use it in checkout.html
5) Every step will have its own component. Create the checkout components in checkout folder, 1) ng g c checkout-address --skip-tests, 2) ng g c ckeckout-delivery --skip-tests
    3) ng g c checkout-review --skip-tests, 4) checkout-payment and add them in checkout.html
6) Adding the checkout form. add reactive form in checkout component
7) Creating the address form. Set up checkout-address
8) Creating the delivery form. Create deliveryMethod model. Create getDeliveryMethods() method in checkout service. Set up checkout-delivery component and its html
    Use it in checkout.component.html
9) Use http interceptor to send the token. Create an interceptor (new file) in src/app/core and add it in app.module.ts
10) Making the basket summary shared. Create new component in shared module in components. ng g c basket-summary --skip-tests. Take the content we want and paste it in basket-summary html 
(the table of basket). export BasketSummaryComponent in share.module.ts and import RouterModule. Set up basket-summary.component.ts. Go back in basket component and place basket summary component
11) Checkout review component. Set up checkout-review.html. In basket summary we will have an input component as a flag that will indicate whether to show extra iunitofwork
    like increment/decrement buttons etc. in checkout form
12) Adding the forward back buttons for the stepper. Add button in bottom of checkout-address.html. Do the same in every checkout-xxx
13) Using the form status to mark the step as complete. Go to checkout component where we have the cdk steps and add [completed condition]
14) Populate the address form from the api. add getUserAddress and updateUserAddtess in acount service and getAddressFormValues in checkout.component.ts.
15) Letting the user save the address. Add saveUserAddress in checkout-address.component.ts and add it in button save in html
16) Updating the shipping price in basket service. create var shipping and method setShippingPrice() and in checkout-delivery and call it from html in radio buttons
17) Create the order interface
18) Order submission. Add method createOrder() in checkout service and deleteLocalBasket() in basket service. Add submitOrder() in checkout-payment ts and html.
19) Checkout success page